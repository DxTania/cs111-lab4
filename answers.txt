# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Tania DePasquale
Student ID: 704018998
Email: rawrtan@gmail.com

# Partner 2 (if you're working in a team)
Name: Carlos Sotelo
Student ID: 303891983
Email: charlysotelo@hotmail.com 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We used the method of forking. Every time we are going to upload or download
a file, we use fork() so that a child process uploads/downloads and the parent
process can continue.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

The filename can cause a buffer overrun. This was fixed by checking
the filename size every time and using strncpy with a length no 
longer than FILENAMESIZ.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

1. Prevent absolute paths(/), home(~) access, and (../) type access.

2. Prevent upload of overly large files.

3. Prevent too many connections by limiting file descriptors to 1000.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

1. Sent very large filename download requests to peers, such to cause a buffer overflow. This will very likely cause a crash on the other peer's client.

2. When uploading a file, keep sending bogus data and never reach the end of the file. Since we can assume the peer's client operates sequentially, we are effectievely wasting the peers time, and resources.

3. Added "attractive" fake files to the tracker we are currently connected to - as to attract more peers, which we can damage using attack number 2.
# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
